// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emo_gRPC.proto

#include "emo_gRPC.pb.h"
#include "emo_gRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace emo_gRPC {

static const char* Communicate_method_names[] = {
  "/emo_gRPC.Communicate/check",
  "/emo_gRPC.Communicate/setEmoConf",
  "/emo_gRPC.Communicate/stopEmo",
  "/emo_gRPC.Communicate/getEmoResult",
  "/emo_gRPC.Communicate/getEmoImg",
};

std::unique_ptr< Communicate::Stub> Communicate::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Communicate::Stub> stub(new Communicate::Stub(channel));
  return stub;
}

Communicate::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_check_(Communicate_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setEmoConf_(Communicate_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stopEmo_(Communicate_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEmoResult_(Communicate_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEmoImg_(Communicate_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Communicate::Stub::check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::NullMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_check_, context, request, response);
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* Communicate::Stub::AsynccheckRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* Communicate::Stub::PrepareAsynccheckRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_check_, context, request, false);
}

::grpc::Status Communicate::Stub::setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::emo_gRPC::NullMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setEmoConf_, context, request, response);
}

void Communicate::Stub::experimental_async::setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setEmoConf_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::setEmoConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setEmoConf_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setEmoConf_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::setEmoConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setEmoConf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* Communicate::Stub::AsyncsetEmoConfRaw(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_setEmoConf_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* Communicate::Stub::PrepareAsyncsetEmoConfRaw(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_setEmoConf_, context, request, false);
}

::grpc::Status Communicate::Stub::stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::NullMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_stopEmo_, context, request, response);
}

void Communicate::Stub::experimental_async::stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_stopEmo_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::stopEmo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_stopEmo_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_stopEmo_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::stopEmo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_stopEmo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* Communicate::Stub::AsyncstopEmoRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_stopEmo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* Communicate::Stub::PrepareAsyncstopEmoRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_stopEmo_, context, request, false);
}

::grpc::Status Communicate::Stub::getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::ResultList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getEmoResult_, context, request, response);
}

void Communicate::Stub::experimental_async::getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getEmoResult_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getEmoResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::ResultList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getEmoResult_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getEmoResult_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::getEmoResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getEmoResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>* Communicate::Stub::AsyncgetEmoResultRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::ResultList>::Create(channel_.get(), cq, rpcmethod_getEmoResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>* Communicate::Stub::PrepareAsyncgetEmoResultRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::ResultList>::Create(channel_.get(), cq, rpcmethod_getEmoResult_, context, request, false);
}

::grpc::Status Communicate::Stub::getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::emo_gRPC::EmoImg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getEmoImg_, context, request, response);
}

void Communicate::Stub::experimental_async::getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getEmoImg_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getEmoImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::EmoImg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getEmoImg_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getEmoImg_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::getEmoImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getEmoImg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>* Communicate::Stub::AsyncgetEmoImgRaw(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::EmoImg>::Create(channel_.get(), cq, rpcmethod_getEmoImg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>* Communicate::Stub::PrepareAsyncgetEmoImgRaw(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::emo_gRPC::EmoImg>::Create(channel_.get(), cq, rpcmethod_getEmoImg_, context, request, false);
}

Communicate::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>(
          std::mem_fn(&Communicate::Service::check), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::emo_gRPC::EmoConfig, ::emo_gRPC::NullMsg>(
          std::mem_fn(&Communicate::Service::setEmoConf), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>(
          std::mem_fn(&Communicate::Service::stopEmo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::emo_gRPC::NullMsg, ::emo_gRPC::ResultList>(
          std::mem_fn(&Communicate::Service::getEmoResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::emo_gRPC::LabelSize, ::emo_gRPC::EmoImg>(
          std::mem_fn(&Communicate::Service::getEmoImg), this)));
}

Communicate::Service::~Service() {
}

::grpc::Status Communicate::Service::check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace emo_gRPC

