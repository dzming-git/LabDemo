// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emo_gRPC.proto
#ifndef GRPC_emo_5fgRPC_2eproto__INCLUDED
#define GRPC_emo_5fgRPC_2eproto__INCLUDED

#include "emo_gRPC.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace emo_gRPC {

class Communicate final {
 public:
  static constexpr char const* service_full_name() {
    return "emo_gRPC.Communicate";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::NullMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>> Asynccheck(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>>(AsynccheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>> PrepareAsynccheck(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>>(PrepareAsynccheckRaw(context, request, cq));
    }
    virtual ::grpc::Status setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::emo_gRPC::NullMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>> AsyncsetEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>>(AsyncsetEmoConfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>> PrepareAsyncsetEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>>(PrepareAsyncsetEmoConfRaw(context, request, cq));
    }
    virtual ::grpc::Status stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::NullMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>> AsyncstopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>>(AsyncstopEmoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>> PrepareAsyncstopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>>(PrepareAsyncstopEmoRaw(context, request, cq));
    }
    virtual ::grpc::Status getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::ResultList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::ResultList>> AsyncgetEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::ResultList>>(AsyncgetEmoResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::ResultList>> PrepareAsyncgetEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::ResultList>>(PrepareAsyncgetEmoResultRaw(context, request, cq));
    }
    virtual ::grpc::Status getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::emo_gRPC::EmoImg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::EmoImg>> AsyncgetEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::EmoImg>>(AsyncgetEmoImgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::EmoImg>> PrepareAsyncgetEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::EmoImg>>(PrepareAsyncgetEmoImgRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setEmoConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void setEmoConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopEmo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void stopEmo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEmoResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::ResultList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getEmoResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEmoImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::EmoImg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getEmoImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>* AsynccheckRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>* PrepareAsynccheckRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>* AsyncsetEmoConfRaw(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>* PrepareAsyncsetEmoConfRaw(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>* AsyncstopEmoRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::NullMsg>* PrepareAsyncstopEmoRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::ResultList>* AsyncgetEmoResultRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::ResultList>* PrepareAsyncgetEmoResultRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::EmoImg>* AsyncgetEmoImgRaw(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emo_gRPC::EmoImg>* PrepareAsyncgetEmoImgRaw(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::NullMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>> Asynccheck(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>>(AsynccheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>> PrepareAsynccheck(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>>(PrepareAsynccheckRaw(context, request, cq));
    }
    ::grpc::Status setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::emo_gRPC::NullMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>> AsyncsetEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>>(AsyncsetEmoConfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>> PrepareAsyncsetEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>>(PrepareAsyncsetEmoConfRaw(context, request, cq));
    }
    ::grpc::Status stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::NullMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>> AsyncstopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>>(AsyncstopEmoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>> PrepareAsyncstopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>>(PrepareAsyncstopEmoRaw(context, request, cq));
    }
    ::grpc::Status getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::emo_gRPC::ResultList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>> AsyncgetEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>>(AsyncgetEmoResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>> PrepareAsyncgetEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>>(PrepareAsyncgetEmoResultRaw(context, request, cq));
    }
    ::grpc::Status getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::emo_gRPC::EmoImg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>> AsyncgetEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>>(AsyncgetEmoImgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>> PrepareAsyncgetEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>>(PrepareAsyncgetEmoImgRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void check(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void setEmoConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void setEmoConf(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void setEmoConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void stopEmo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void stopEmo(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void stopEmo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, std::function<void(::grpc::Status)>) override;
      void getEmoResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::ResultList* response, std::function<void(::grpc::Status)>) override;
      void getEmoResult(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getEmoResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, std::function<void(::grpc::Status)>) override;
      void getEmoImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::EmoImg* response, std::function<void(::grpc::Status)>) override;
      void getEmoImg(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getEmoImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* AsynccheckRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* PrepareAsynccheckRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* AsyncsetEmoConfRaw(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* PrepareAsyncsetEmoConfRaw(::grpc::ClientContext* context, const ::emo_gRPC::EmoConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* AsyncstopEmoRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::NullMsg>* PrepareAsyncstopEmoRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>* AsyncgetEmoResultRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::ResultList>* PrepareAsyncgetEmoResultRaw(::grpc::ClientContext* context, const ::emo_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>* AsyncgetEmoImgRaw(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emo_gRPC::EmoImg>* PrepareAsyncgetEmoImgRaw(::grpc::ClientContext* context, const ::emo_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_check_;
    const ::grpc::internal::RpcMethod rpcmethod_setEmoConf_;
    const ::grpc::internal::RpcMethod rpcmethod_stopEmo_;
    const ::grpc::internal::RpcMethod rpcmethod_getEmoResult_;
    const ::grpc::internal::RpcMethod rpcmethod_getEmoImg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response);
    virtual ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response);
    virtual ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response);
    virtual ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response);
    virtual ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck(::grpc::ServerContext* context, ::emo_gRPC::NullMsg* request, ::grpc::ServerAsyncResponseWriter< ::emo_gRPC::NullMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setEmoConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setEmoConf() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_setEmoConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetEmoConf(::grpc::ServerContext* context, ::emo_gRPC::EmoConfig* request, ::grpc::ServerAsyncResponseWriter< ::emo_gRPC::NullMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stopEmo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_stopEmo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_stopEmo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopEmo(::grpc::ServerContext* context, ::emo_gRPC::NullMsg* request, ::grpc::ServerAsyncResponseWriter< ::emo_gRPC::NullMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEmoResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getEmoResult() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getEmoResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEmoResult(::grpc::ServerContext* context, ::emo_gRPC::NullMsg* request, ::grpc::ServerAsyncResponseWriter< ::emo_gRPC::ResultList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEmoImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getEmoImg() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getEmoImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEmoImg(::grpc::ServerContext* context, ::emo_gRPC::LabelSize* request, ::grpc::ServerAsyncResponseWriter< ::emo_gRPC::EmoImg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_check<WithAsyncMethod_setEmoConf<WithAsyncMethod_stopEmo<WithAsyncMethod_getEmoResult<WithAsyncMethod_getEmoImg<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_check() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>(
          [this](::grpc::ServerContext* context,
                 const ::emo_gRPC::NullMsg* request,
                 ::emo_gRPC::NullMsg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->check(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_check(
        ::grpc::experimental::MessageAllocator< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setEmoConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_setEmoConf() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::EmoConfig, ::emo_gRPC::NullMsg>(
          [this](::grpc::ServerContext* context,
                 const ::emo_gRPC::EmoConfig* request,
                 ::emo_gRPC::NullMsg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->setEmoConf(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_setEmoConf(
        ::grpc::experimental::MessageAllocator< ::emo_gRPC::EmoConfig, ::emo_gRPC::NullMsg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::EmoConfig, ::emo_gRPC::NullMsg>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setEmoConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_stopEmo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_stopEmo() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>(
          [this](::grpc::ServerContext* context,
                 const ::emo_gRPC::NullMsg* request,
                 ::emo_gRPC::NullMsg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->stopEmo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_stopEmo(
        ::grpc::experimental::MessageAllocator< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_stopEmo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getEmoResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getEmoResult() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::ResultList>(
          [this](::grpc::ServerContext* context,
                 const ::emo_gRPC::NullMsg* request,
                 ::emo_gRPC::ResultList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getEmoResult(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_getEmoResult(
        ::grpc::experimental::MessageAllocator< ::emo_gRPC::NullMsg, ::emo_gRPC::ResultList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::ResultList>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getEmoResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getEmoImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getEmoImg() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::LabelSize, ::emo_gRPC::EmoImg>(
          [this](::grpc::ServerContext* context,
                 const ::emo_gRPC::LabelSize* request,
                 ::emo_gRPC::EmoImg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getEmoImg(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_getEmoImg(
        ::grpc::experimental::MessageAllocator< ::emo_gRPC::LabelSize, ::emo_gRPC::EmoImg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::emo_gRPC::LabelSize, ::emo_gRPC::EmoImg>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getEmoImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_check<ExperimentalWithCallbackMethod_setEmoConf<ExperimentalWithCallbackMethod_stopEmo<ExperimentalWithCallbackMethod_getEmoResult<ExperimentalWithCallbackMethod_getEmoImg<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setEmoConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setEmoConf() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_setEmoConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stopEmo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_stopEmo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_stopEmo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEmoResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getEmoResult() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getEmoResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEmoImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getEmoImg() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getEmoImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setEmoConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_setEmoConf() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_setEmoConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetEmoConf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stopEmo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_stopEmo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_stopEmo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopEmo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEmoResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getEmoResult() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getEmoResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEmoResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEmoImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getEmoImg() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getEmoImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEmoImg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_check() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->check(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void check(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setEmoConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_setEmoConf() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->setEmoConf(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_setEmoConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void setEmoConf(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_stopEmo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_stopEmo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->stopEmo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_stopEmo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void stopEmo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getEmoResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getEmoResult() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getEmoResult(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getEmoResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getEmoResult(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getEmoImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getEmoImg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getEmoImg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getEmoImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getEmoImg(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>(std::bind(&WithStreamedUnaryMethod_check<BaseClass>::Streamedcheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emo_gRPC::NullMsg,::emo_gRPC::NullMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setEmoConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setEmoConf() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::emo_gRPC::EmoConfig, ::emo_gRPC::NullMsg>(std::bind(&WithStreamedUnaryMethod_setEmoConf<BaseClass>::StreamedsetEmoConf, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setEmoConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setEmoConf(::grpc::ServerContext* context, const ::emo_gRPC::EmoConfig* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetEmoConf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emo_gRPC::EmoConfig,::emo_gRPC::NullMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stopEmo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_stopEmo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::NullMsg>(std::bind(&WithStreamedUnaryMethod_stopEmo<BaseClass>::StreamedstopEmo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_stopEmo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stopEmo(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstopEmo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emo_gRPC::NullMsg,::emo_gRPC::NullMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEmoResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getEmoResult() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::emo_gRPC::NullMsg, ::emo_gRPC::ResultList>(std::bind(&WithStreamedUnaryMethod_getEmoResult<BaseClass>::StreamedgetEmoResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getEmoResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEmoResult(::grpc::ServerContext* context, const ::emo_gRPC::NullMsg* request, ::emo_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEmoResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emo_gRPC::NullMsg,::emo_gRPC::ResultList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEmoImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getEmoImg() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::emo_gRPC::LabelSize, ::emo_gRPC::EmoImg>(std::bind(&WithStreamedUnaryMethod_getEmoImg<BaseClass>::StreamedgetEmoImg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getEmoImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEmoImg(::grpc::ServerContext* context, const ::emo_gRPC::LabelSize* request, ::emo_gRPC::EmoImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEmoImg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emo_gRPC::LabelSize,::emo_gRPC::EmoImg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_check<WithStreamedUnaryMethod_setEmoConf<WithStreamedUnaryMethod_stopEmo<WithStreamedUnaryMethod_getEmoResult<WithStreamedUnaryMethod_getEmoImg<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_check<WithStreamedUnaryMethod_setEmoConf<WithStreamedUnaryMethod_stopEmo<WithStreamedUnaryMethod_getEmoResult<WithStreamedUnaryMethod_getEmoImg<Service > > > > > StreamedService;
};

}  // namespace emo_gRPC


#endif  // GRPC_emo_5fgRPC_2eproto__INCLUDED
