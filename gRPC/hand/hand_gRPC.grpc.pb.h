// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hand_gRPC.proto
#ifndef GRPC_hand_5fgRPC_2eproto__INCLUDED
#define GRPC_hand_5fgRPC_2eproto__INCLUDED

#include "hand_gRPC.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace hand_gRPC {

class Communicate final {
 public:
  static constexpr char const* service_full_name() {
    return "hand_gRPC.Communicate";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::NullMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>> Asynccheck(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>>(AsynccheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>> PrepareAsynccheck(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>>(PrepareAsynccheckRaw(context, request, cq));
    }
    virtual ::grpc::Status setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::hand_gRPC::NullMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>> AsyncsetHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>>(AsyncsetHandConfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>> PrepareAsyncsetHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>>(PrepareAsyncsetHandConfRaw(context, request, cq));
    }
    virtual ::grpc::Status stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::NullMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>> AsyncstopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>>(AsyncstopHandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>> PrepareAsyncstopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>>(PrepareAsyncstopHandRaw(context, request, cq));
    }
    virtual ::grpc::Status getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::ResultList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::ResultList>> AsyncgetHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::ResultList>>(AsyncgetHandResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::ResultList>> PrepareAsyncgetHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::ResultList>>(PrepareAsyncgetHandResultRaw(context, request, cq));
    }
    virtual ::grpc::Status getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::hand_gRPC::HandImg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::HandImg>> AsyncgetHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::HandImg>>(AsyncgetHandImgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::HandImg>> PrepareAsyncgetHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::HandImg>>(PrepareAsyncgetHandImgRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setHandConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void setHandConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopHand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void stopHand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getHandResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::ResultList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getHandResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getHandImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::HandImg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void getHandImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>* AsynccheckRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>* PrepareAsynccheckRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>* AsyncsetHandConfRaw(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>* PrepareAsyncsetHandConfRaw(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>* AsyncstopHandRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::NullMsg>* PrepareAsyncstopHandRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::ResultList>* AsyncgetHandResultRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::ResultList>* PrepareAsyncgetHandResultRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::HandImg>* AsyncgetHandImgRaw(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hand_gRPC::HandImg>* PrepareAsyncgetHandImgRaw(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::NullMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>> Asynccheck(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>>(AsynccheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>> PrepareAsynccheck(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>>(PrepareAsynccheckRaw(context, request, cq));
    }
    ::grpc::Status setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::hand_gRPC::NullMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>> AsyncsetHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>>(AsyncsetHandConfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>> PrepareAsyncsetHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>>(PrepareAsyncsetHandConfRaw(context, request, cq));
    }
    ::grpc::Status stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::NullMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>> AsyncstopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>>(AsyncstopHandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>> PrepareAsyncstopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>>(PrepareAsyncstopHandRaw(context, request, cq));
    }
    ::grpc::Status getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::ResultList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>> AsyncgetHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>>(AsyncgetHandResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>> PrepareAsyncgetHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>>(PrepareAsyncgetHandResultRaw(context, request, cq));
    }
    ::grpc::Status getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::hand_gRPC::HandImg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>> AsyncgetHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>>(AsyncgetHandImgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>> PrepareAsyncgetHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>>(PrepareAsyncgetHandImgRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void setHandConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void setHandConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void stopHand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)>) override;
      void stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void stopHand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, std::function<void(::grpc::Status)>) override;
      void getHandResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::ResultList* response, std::function<void(::grpc::Status)>) override;
      void getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getHandResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, std::function<void(::grpc::Status)>) override;
      void getHandImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::HandImg* response, std::function<void(::grpc::Status)>) override;
      void getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void getHandImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* AsynccheckRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* PrepareAsynccheckRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* AsyncsetHandConfRaw(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* PrepareAsyncsetHandConfRaw(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* AsyncstopHandRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* PrepareAsyncstopHandRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>* AsyncgetHandResultRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>* PrepareAsyncgetHandResultRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>* AsyncgetHandImgRaw(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>* PrepareAsyncgetHandImgRaw(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_check_;
    const ::grpc::internal::RpcMethod rpcmethod_setHandConf_;
    const ::grpc::internal::RpcMethod rpcmethod_stopHand_;
    const ::grpc::internal::RpcMethod rpcmethod_getHandResult_;
    const ::grpc::internal::RpcMethod rpcmethod_getHandImg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response);
    virtual ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response);
    virtual ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response);
    virtual ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response);
    virtual ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck(::grpc::ServerContext* context, ::hand_gRPC::NullMsg* request, ::grpc::ServerAsyncResponseWriter< ::hand_gRPC::NullMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setHandConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setHandConf() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_setHandConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetHandConf(::grpc::ServerContext* context, ::hand_gRPC::HandConfig* request, ::grpc::ServerAsyncResponseWriter< ::hand_gRPC::NullMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stopHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_stopHand() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_stopHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopHand(::grpc::ServerContext* context, ::hand_gRPC::NullMsg* request, ::grpc::ServerAsyncResponseWriter< ::hand_gRPC::NullMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getHandResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getHandResult() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getHandResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHandResult(::grpc::ServerContext* context, ::hand_gRPC::NullMsg* request, ::grpc::ServerAsyncResponseWriter< ::hand_gRPC::ResultList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getHandImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getHandImg() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getHandImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHandImg(::grpc::ServerContext* context, ::hand_gRPC::LabelSize* request, ::grpc::ServerAsyncResponseWriter< ::hand_gRPC::HandImg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_check<WithAsyncMethod_setHandConf<WithAsyncMethod_stopHand<WithAsyncMethod_getHandResult<WithAsyncMethod_getHandImg<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_check() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>(
          [this](::grpc::ServerContext* context,
                 const ::hand_gRPC::NullMsg* request,
                 ::hand_gRPC::NullMsg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->check(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_check(
        ::grpc::experimental::MessageAllocator< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setHandConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_setHandConf() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::HandConfig, ::hand_gRPC::NullMsg>(
          [this](::grpc::ServerContext* context,
                 const ::hand_gRPC::HandConfig* request,
                 ::hand_gRPC::NullMsg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->setHandConf(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_setHandConf(
        ::grpc::experimental::MessageAllocator< ::hand_gRPC::HandConfig, ::hand_gRPC::NullMsg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::HandConfig, ::hand_gRPC::NullMsg>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setHandConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_stopHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_stopHand() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>(
          [this](::grpc::ServerContext* context,
                 const ::hand_gRPC::NullMsg* request,
                 ::hand_gRPC::NullMsg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->stopHand(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_stopHand(
        ::grpc::experimental::MessageAllocator< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_stopHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getHandResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getHandResult() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::ResultList>(
          [this](::grpc::ServerContext* context,
                 const ::hand_gRPC::NullMsg* request,
                 ::hand_gRPC::ResultList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getHandResult(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_getHandResult(
        ::grpc::experimental::MessageAllocator< ::hand_gRPC::NullMsg, ::hand_gRPC::ResultList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::ResultList>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getHandResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getHandImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getHandImg() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::LabelSize, ::hand_gRPC::HandImg>(
          [this](::grpc::ServerContext* context,
                 const ::hand_gRPC::LabelSize* request,
                 ::hand_gRPC::HandImg* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getHandImg(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_getHandImg(
        ::grpc::experimental::MessageAllocator< ::hand_gRPC::LabelSize, ::hand_gRPC::HandImg>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::hand_gRPC::LabelSize, ::hand_gRPC::HandImg>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getHandImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_check<ExperimentalWithCallbackMethod_setHandConf<ExperimentalWithCallbackMethod_stopHand<ExperimentalWithCallbackMethod_getHandResult<ExperimentalWithCallbackMethod_getHandImg<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setHandConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setHandConf() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_setHandConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stopHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_stopHand() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_stopHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getHandResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getHandResult() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getHandResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getHandImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getHandImg() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getHandImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setHandConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_setHandConf() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_setHandConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetHandConf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stopHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_stopHand() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_stopHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopHand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getHandResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getHandResult() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getHandResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHandResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getHandImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getHandImg() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getHandImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHandImg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_check() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->check(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void check(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setHandConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_setHandConf() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->setHandConf(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_setHandConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void setHandConf(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_stopHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_stopHand() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->stopHand(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_stopHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void stopHand(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getHandResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getHandResult() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getHandResult(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getHandResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHandResult(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getHandImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getHandImg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getHandImg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getHandImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHandImg(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>(std::bind(&WithStreamedUnaryMethod_check<BaseClass>::Streamedcheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hand_gRPC::NullMsg,::hand_gRPC::NullMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setHandConf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setHandConf() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::hand_gRPC::HandConfig, ::hand_gRPC::NullMsg>(std::bind(&WithStreamedUnaryMethod_setHandConf<BaseClass>::StreamedsetHandConf, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setHandConf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetHandConf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hand_gRPC::HandConfig,::hand_gRPC::NullMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stopHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_stopHand() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>(std::bind(&WithStreamedUnaryMethod_stopHand<BaseClass>::StreamedstopHand, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_stopHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstopHand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hand_gRPC::NullMsg,::hand_gRPC::NullMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getHandResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getHandResult() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::hand_gRPC::NullMsg, ::hand_gRPC::ResultList>(std::bind(&WithStreamedUnaryMethod_getHandResult<BaseClass>::StreamedgetHandResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getHandResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetHandResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hand_gRPC::NullMsg,::hand_gRPC::ResultList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getHandImg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getHandImg() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::hand_gRPC::LabelSize, ::hand_gRPC::HandImg>(std::bind(&WithStreamedUnaryMethod_getHandImg<BaseClass>::StreamedgetHandImg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getHandImg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetHandImg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hand_gRPC::LabelSize,::hand_gRPC::HandImg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_check<WithStreamedUnaryMethod_setHandConf<WithStreamedUnaryMethod_stopHand<WithStreamedUnaryMethod_getHandResult<WithStreamedUnaryMethod_getHandImg<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_check<WithStreamedUnaryMethod_setHandConf<WithStreamedUnaryMethod_stopHand<WithStreamedUnaryMethod_getHandResult<WithStreamedUnaryMethod_getHandImg<Service > > > > > StreamedService;
};

}  // namespace hand_gRPC


#endif  // GRPC_hand_5fgRPC_2eproto__INCLUDED
