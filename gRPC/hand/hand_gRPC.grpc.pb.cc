// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hand_gRPC.proto

#include "hand_gRPC.pb.h"
#include "hand_gRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hand_gRPC {

static const char* Communicate_method_names[] = {
  "/hand_gRPC.Communicate/check",
  "/hand_gRPC.Communicate/setHandConf",
  "/hand_gRPC.Communicate/stopHand",
  "/hand_gRPC.Communicate/getHandResult",
  "/hand_gRPC.Communicate/getHandImg",
};

std::unique_ptr< Communicate::Stub> Communicate::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Communicate::Stub> stub(new Communicate::Stub(channel));
  return stub;
}

Communicate::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_check_(Communicate_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setHandConf_(Communicate_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stopHand_(Communicate_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getHandResult_(Communicate_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getHandImg_(Communicate_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Communicate::Stub::check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::NullMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_check_, context, request, response);
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::check(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* Communicate::Stub::AsynccheckRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_check_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* Communicate::Stub::PrepareAsynccheckRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_check_, context, request, false);
}

::grpc::Status Communicate::Stub::setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::hand_gRPC::NullMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setHandConf_, context, request, response);
}

void Communicate::Stub::experimental_async::setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setHandConf_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::setHandConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setHandConf_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::setHandConf(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setHandConf_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::setHandConf(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setHandConf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* Communicate::Stub::AsyncsetHandConfRaw(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_setHandConf_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* Communicate::Stub::PrepareAsyncsetHandConfRaw(::grpc::ClientContext* context, const ::hand_gRPC::HandConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_setHandConf_, context, request, false);
}

::grpc::Status Communicate::Stub::stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::NullMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_stopHand_, context, request, response);
}

void Communicate::Stub::experimental_async::stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_stopHand_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::stopHand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_stopHand_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::stopHand(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_stopHand_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::stopHand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::NullMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_stopHand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* Communicate::Stub::AsyncstopHandRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_stopHand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::NullMsg>* Communicate::Stub::PrepareAsyncstopHandRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::NullMsg>::Create(channel_.get(), cq, rpcmethod_stopHand_, context, request, false);
}

::grpc::Status Communicate::Stub::getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::hand_gRPC::ResultList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getHandResult_, context, request, response);
}

void Communicate::Stub::experimental_async::getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHandResult_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getHandResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::ResultList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHandResult_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getHandResult(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHandResult_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::getHandResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::ResultList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHandResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>* Communicate::Stub::AsyncgetHandResultRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::ResultList>::Create(channel_.get(), cq, rpcmethod_getHandResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::ResultList>* Communicate::Stub::PrepareAsyncgetHandResultRaw(::grpc::ClientContext* context, const ::hand_gRPC::NullMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::ResultList>::Create(channel_.get(), cq, rpcmethod_getHandResult_, context, request, false);
}

::grpc::Status Communicate::Stub::getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::hand_gRPC::HandImg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getHandImg_, context, request, response);
}

void Communicate::Stub::experimental_async::getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHandImg_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getHandImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::HandImg* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHandImg_, context, request, response, std::move(f));
}

void Communicate::Stub::experimental_async::getHandImg(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHandImg_, context, request, response, reactor);
}

void Communicate::Stub::experimental_async::getHandImg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::hand_gRPC::HandImg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHandImg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>* Communicate::Stub::AsyncgetHandImgRaw(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::HandImg>::Create(channel_.get(), cq, rpcmethod_getHandImg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::hand_gRPC::HandImg>* Communicate::Stub::PrepareAsyncgetHandImgRaw(::grpc::ClientContext* context, const ::hand_gRPC::LabelSize& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::hand_gRPC::HandImg>::Create(channel_.get(), cq, rpcmethod_getHandImg_, context, request, false);
}

Communicate::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>(
          std::mem_fn(&Communicate::Service::check), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::hand_gRPC::HandConfig, ::hand_gRPC::NullMsg>(
          std::mem_fn(&Communicate::Service::setHandConf), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::hand_gRPC::NullMsg, ::hand_gRPC::NullMsg>(
          std::mem_fn(&Communicate::Service::stopHand), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::hand_gRPC::NullMsg, ::hand_gRPC::ResultList>(
          std::mem_fn(&Communicate::Service::getHandResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communicate_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communicate::Service, ::hand_gRPC::LabelSize, ::hand_gRPC::HandImg>(
          std::mem_fn(&Communicate::Service::getHandImg), this)));
}

Communicate::Service::~Service() {
}

::grpc::Status Communicate::Service::check(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::setHandConf(::grpc::ServerContext* context, const ::hand_gRPC::HandConfig* request, ::hand_gRPC::NullMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::stopHand(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::NullMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::getHandResult(::grpc::ServerContext* context, const ::hand_gRPC::NullMsg* request, ::hand_gRPC::ResultList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communicate::Service::getHandImg(::grpc::ServerContext* context, const ::hand_gRPC::LabelSize* request, ::hand_gRPC::HandImg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hand_gRPC

